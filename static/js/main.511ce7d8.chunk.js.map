{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Topack","topack","index","completeTopack","removeTopack","className","style","textDecoration","isCompleted","backgroundColor","text","onClick","TopackForm","addTopack","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","App","todos","setTopacks","newTopacks","splice","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NAGA,SAASA,EAAT,GAAkE,IAAhDC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,eAAgBC,EAAgB,EAAhBA,aAC/C,OACE,yBACEC,UAAU,SACVC,MAAO,CAAEC,eAAgBN,EAAOO,YAAc,eAAiB,GAAGC,gBAAiBR,EAAOO,YAAc,UAAW,KAElHP,EAAOS,KACR,6BACE,4BAAQC,QAAS,kBAAMR,EAAeD,KAAtC,UACA,4BAAQS,QAAS,kBAAMP,EAAaF,KAApC,OAMR,SAASU,EAAT,GAAoC,IAAdC,EAAa,EAAbA,UAAa,EACPC,mBAAS,IADF,mBAC1BC,EAD0B,KACnBC,EADmB,KAUjC,OACE,0BAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACGJ,IACLF,EAAUE,GACVC,EAAS,OAKP,kDACA,2BACEI,KAAK,OACLf,UAAU,QACVU,MAAOA,EACPM,SAAU,SAAAH,GAAC,OAAIF,EAASE,EAAEI,OAAOP,WAgE1BQ,MA1Df,WAAgB,IAAD,EACeT,mBAAS,CACnC,CACEJ,KAAM,QACNF,aAAa,GAEf,CACEE,KAAM,WACNF,aAAa,GAEf,CACEE,KAAM,aACNF,aAAa,GAEf,CACEE,KAAM,UACNF,aAAa,KAhBJ,mBACNgB,EADM,KACCC,EADD,KAyBPtB,EAAiB,SAAAD,GACrB,IAAMwB,EAAU,YAAOF,GACvBE,EAAWxB,GAAOM,aAAc,EAChCiB,EAAWC,IAGPtB,EAAe,SAAAF,GACnB,IAAMwB,EAAU,YAAOF,GACvBE,EAAWC,OAAOzB,EAAO,GACzBuB,EAAWC,IAGb,OACE,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,WACf,mDAEA,yBAAKA,UAAU,eACZmB,EAAMI,KAAI,SAAC3B,EAAQC,GAAT,OACT,kBAACF,EAAD,CACE6B,IAAK3B,EACLA,MAAOA,EACPD,OAAQA,EACRE,eAAgBA,EAChBC,aAAcA,OAGlB,kBAACQ,EAAD,CAAYC,UAhCD,SAAAH,GACf,IAAMgB,EAAU,sBAAOF,GAAP,CAAc,CAAEd,UAChCe,EAAWC,SCnDKI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.511ce7d8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction Topack({ topack, index, completeTopack, removeTopack }) {\n  return (\n    <div\n      className=\"topack\"\n      style={{ textDecoration: topack.isCompleted ? \"line-through\" : \"\",backgroundColor: topack.isCompleted ? \"#96c7d5\" :\"\" }}\n    >\n      {topack.text}\n      <div >\n        <button onClick={() => completeTopack(index)}>Packed</button>\n        <button onClick={() => removeTopack(index)}>x</button>\n      </div>\n    </div>\n  );\n}\n\nfunction TopackForm({ addTopack }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTopack(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>Add more items </label>\n      <input\n        type=\"text\"\n        className=\"input\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n    </form>\n  );\n}\n\nfunction App() {\n  const [todos, setTopacks] = useState([\n    {\n      text: \"Shoes\",\n      isCompleted: false\n    },\n    {\n      text: \"Slippers\",\n      isCompleted: false\n    },\n    {\n      text: \"Sunglasses\",\n      isCompleted: false\n    },\n    {\n      text: \"Charger\",\n      isCompleted: false\n    }\n  ]);\n\n  const addTopack= text => {\n    const newTopacks = [...todos, { text }];\n    setTopacks(newTopacks);\n  };\n\n  const completeTopack = index => {\n    const newTopacks = [...todos];\n    newTopacks[index].isCompleted = true;\n    setTopacks(newTopacks);\n  };\n\n  const removeTopack = index => {\n    const newTopacks = [...todos];\n    newTopacks.splice(index, 1);\n    setTopacks(newTopacks);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"heading\">\n      <h1> Travel CheckList </h1>\n      </div>\n      <div className=\"topack-list\">\n        {todos.map((topack, index) => (\n          <Topack\n            key={index}\n            index={index}\n            topack={topack}\n            completeTopack={completeTopack}\n            removeTopack={removeTopack}\n          />\n        ))}\n        <TopackForm addTopack={addTopack} />\n      </div>\n    </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}